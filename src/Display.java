/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import javax.swing.JOptionPane;
import java.awt.Toolkit;
import java.awt.event.*;
import java.util.Calendar;
import javax.swing.JFrame;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.JRootPane;
//import DisplayTest.*;
/**
/**
 *
 * @author Jens
 */
public class Display extends javax.swing.JFrame {
    private static Display display = null;
    private static SensorControl sensor;
    private HRSurveillance surveyhr;
    private SPO2Surveillance surveyspo2;
    private PatientData pat;
    private ResetLimits lim;
    
// Image for alert break needed
    private static String[] imageList =  {  "/img/alarm_on.png" , "/img/alarm_off.png"};
    private Timer timer = new Timer("TaskName");
    private int MINUTES = 5;
    
    // Birthyear for Combobox
    private ComboBoxModel <String> birthYear; //currentYear is an int variable
    
// states 
    private boolean disable = false;
    // patientinit == true: initial Patient
    // patientinit == false: patient Change
    private boolean init = true;
    // init == false: nicht initialisiert
    // init == true: initialisiert
    private boolean pause = false;
    /**
     * Creates new form Monitor
     */
    public Display() {
            pat = new PatientData();
            lim = new ResetLimits();
            surveyhr = new HRSurveillance();
            surveyspo2 = new SPO2Surveillance();
            initCombobox();
            initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ResetLimits = new javax.swing.JFrame();
        yes = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        decline = new javax.swing.JButton();
        Setlimitstartup = new javax.swing.JFrame();
        upper_label = new javax.swing.JLabel();
        uplim_ini = new javax.swing.JTextField();
        spo2_ini = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lowlim_ini = new javax.swing.JTextField();
        lower_label2 = new javax.swing.JLabel();
        setlimits = new javax.swing.JButton();
        restoredefault = new javax.swing.JButton();
        LimitHR_lower = new javax.swing.JFrame();
        lower_value = new javax.swing.JTextField();
        lower_label1 = new javax.swing.JLabel();
        return_lowerHR = new javax.swing.JButton();
        cancel_lowerHR = new javax.swing.JButton();
        LimitHR_upper = new javax.swing.JFrame();
        return_upper = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();
        upper_label1 = new javax.swing.JLabel();
        upper_value = new javax.swing.JTextField();
        LimitSPO2 = new javax.swing.JFrame();
        spo2_val = new javax.swing.JTextField();
        return_spo2 = new javax.swing.JButton();
        cancel2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Patient_UI = new javax.swing.JFrame();
        savepatient = new javax.swing.JButton();
        cancel_patient = new javax.swing.JButton();
        Patient_data_heading3 = new javax.swing.JLabel();
        name_field = new javax.swing.JTextField();
        name = new javax.swing.JLabel();
        surname = new javax.swing.JLabel();
        surname_field = new javax.swing.JTextField();
        sex = new javax.swing.JLabel();
        sex_box = new javax.swing.JComboBox<>();
        birthdate = new javax.swing.JLabel();
        day = new javax.swing.JComboBox<>();
        month = new javax.swing.JComboBox<>();
        day_lab = new javax.swing.JLabel();
        month_lab = new javax.swing.JLabel();
        year_lab = new javax.swing.JLabel();
        year = new javax.swing.JComboBox<>();
        pausealert = new javax.swing.JFrame();
        pauseok = new javax.swing.JButton();
        pausecancel = new javax.swing.JButton();
        pauselabel = new javax.swing.JLabel();
        name_lab = new javax.swing.JLabel();
        name_disp = new javax.swing.JTextField();
        surname_disp = new javax.swing.JTextField();
        surname_lab = new javax.swing.JLabel();
        patient_cng = new javax.swing.JButton();
        birth_disp = new javax.swing.JTextField();
        birthday_lab = new javax.swing.JLabel();
        sexlab = new javax.swing.JLabel();
        sex_disp = new javax.swing.JTextField();
        heartrate_out = new javax.swing.JTextField();
        Heart_lab = new javax.swing.JLabel();
        limitlowhrout = new javax.swing.JTextField();
        limituphrout = new javax.swing.JTextField();
        SPO2_lab = new javax.swing.JLabel();
        spo2_out = new javax.swing.JTextField();
        spo2limitout = new javax.swing.JTextField();
        spo2_lab = new javax.swing.JLabel();
        reset_limit = new javax.swing.JButton();
        alarmbreak = new javax.swing.JButton();
        header_label = new javax.swing.JLabel();
        lower_limit = new javax.swing.JLabel();
        upper_limit = new javax.swing.JLabel();
        alarm_img = new javax.swing.JLabel();
        age = new javax.swing.JLabel();
        age_field = new javax.swing.JTextField();
        HR_alert = new javax.swing.JTextField();
        spo2_alert = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        ResetLimits.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ResetLimits.setAlwaysOnTop(true);
        ResetLimits.setMinimumSize(new java.awt.Dimension(250, 125));
        ResetLimits.setUndecorated(true);
        ResetLimits.setPreferredSize(new java.awt.Dimension(250, 125));
        ResetLimits.setResizable(false);

        yes.setText("Ok");
        yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Set all Limits to default?");

        decline.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        decline.setText("decline");
        decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ResetLimitsLayout = new javax.swing.GroupLayout(ResetLimits.getContentPane());
        ResetLimits.getContentPane().setLayout(ResetLimitsLayout);
        ResetLimitsLayout.setHorizontalGroup(
            ResetLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResetLimitsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ResetLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(ResetLimitsLayout.createSequentialGroup()
                        .addComponent(yes, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decline, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ResetLimitsLayout.setVerticalGroup(
            ResetLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResetLimitsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResetLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(decline)
                    .addComponent(yes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Setlimitstartup.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Setlimitstartup.setAlwaysOnTop(true);
        Setlimitstartup.setMinimumSize(new java.awt.Dimension(400, 350));
        Setlimitstartup.setUndecorated(true);
        Setlimitstartup.setResizable(false);

        upper_label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        upper_label.setText("Insert upper Pulse Limit");

        uplim_ini.setBackground(new java.awt.Color(250, 250, 250));
        uplim_ini.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        uplim_ini.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        uplim_ini.setText("160");
        uplim_ini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uplim_iniMouseClicked(evt);
            }
        });
        uplim_ini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uplim_iniActionPerformed(evt);
            }
        });

        spo2_ini.setBackground(new java.awt.Color(250, 250, 250));
        spo2_ini.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        spo2_ini.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spo2_ini.setText("90");
        spo2_ini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spo2_iniMouseClicked(evt);
            }
        });
        spo2_ini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spo2_iniActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Insert SpO2 Limit");

        lowlim_ini.setBackground(new java.awt.Color(250, 250, 250));
        lowlim_ini.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        lowlim_ini.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lowlim_ini.setText("50");
        lowlim_ini.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        lowlim_ini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lowlim_iniMouseClicked(evt);
            }
        });
        lowlim_ini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowlim_iniActionPerformed(evt);
            }
        });

        lower_label2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lower_label2.setText("Insert lower Pulse Limit");

        setlimits.setText("save limits");
        setlimits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setlimitsActionPerformed(evt);
            }
        });

        restoredefault.setText("restore default limits");
        restoredefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoredefaultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SetlimitstartupLayout = new javax.swing.GroupLayout(Setlimitstartup.getContentPane());
        Setlimitstartup.getContentPane().setLayout(SetlimitstartupLayout);
        SetlimitstartupLayout.setHorizontalGroup(
            SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SetlimitstartupLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lower_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(spo2_ini))
                    .addComponent(lowlim_ini, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SetlimitstartupLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(upper_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(uplim_ini)))
                    .addComponent(setlimits, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(restoredefault, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SetlimitstartupLayout.setVerticalGroup(
            SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SetlimitstartupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lower_label2)
                    .addComponent(upper_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowlim_ini, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uplim_ini, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SetlimitstartupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spo2_ini, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SetlimitstartupLayout.createSequentialGroup()
                        .addComponent(setlimits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(restoredefault, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        LimitHR_lower.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        LimitHR_lower.setAlwaysOnTop(true);
        LimitHR_lower.setMinimumSize(new java.awt.Dimension(350, 350));
        LimitHR_lower.setUndecorated(true);
        LimitHR_lower.setResizable(false);

        lower_value.setBackground(new java.awt.Color(245, 245, 245));
        lower_value.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        lower_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lower_value.setText("50");
        lower_value.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        lower_value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lower_valueMouseClicked(evt);
            }
        });

        lower_label1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lower_label1.setText("Insert lower Pulse Limit");

        return_lowerHR.setText("Save");
        return_lowerHR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_lowerHRActionPerformed(evt);
            }
        });

        cancel_lowerHR.setText("cancel");
        cancel_lowerHR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_lowerHRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LimitHR_lowerLayout = new javax.swing.GroupLayout(LimitHR_lower.getContentPane());
        LimitHR_lower.getContentPane().setLayout(LimitHR_lowerLayout);
        LimitHR_lowerLayout.setHorizontalGroup(
            LimitHR_lowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitHR_lowerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LimitHR_lowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lower_label1)
                    .addGroup(LimitHR_lowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(LimitHR_lowerLayout.createSequentialGroup()
                            .addComponent(return_lowerHR, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cancel_lowerHR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(lower_value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LimitHR_lowerLayout.setVerticalGroup(
            LimitHR_lowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitHR_lowerLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lower_label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lower_value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LimitHR_lowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel_lowerHR)
                    .addComponent(return_lowerHR))
                .addGap(20, 20, 20))
        );

        LimitHR_upper.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        LimitHR_upper.setAlwaysOnTop(true);
        LimitHR_upper.setMinimumSize(new java.awt.Dimension(350, 350));
        LimitHR_upper.setUndecorated(true);
        LimitHR_upper.setResizable(false);

        return_upper.setText("Save");
        return_upper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_upperActionPerformed(evt);
            }
        });

        cancel1.setText("cancel");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        upper_label1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        upper_label1.setText("Insert upper Pulse Limit");

        upper_value.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        upper_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        upper_value.setText("180");
        upper_value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upper_valueMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout LimitHR_upperLayout = new javax.swing.GroupLayout(LimitHR_upper.getContentPane());
        LimitHR_upper.getContentPane().setLayout(LimitHR_upperLayout);
        LimitHR_upperLayout.setHorizontalGroup(
            LimitHR_upperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitHR_upperLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LimitHR_upperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upper_label1)
                    .addGroup(LimitHR_upperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LimitHR_upperLayout.createSequentialGroup()
                            .addComponent(return_upper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(upper_value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LimitHR_upperLayout.setVerticalGroup(
            LimitHR_upperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitHR_upperLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(upper_label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upper_value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LimitHR_upperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancel1)
                    .addComponent(return_upper))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        LimitSPO2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        LimitSPO2.setAlwaysOnTop(true);
        LimitSPO2.setMinimumSize(new java.awt.Dimension(350, 350));
        LimitSPO2.setUndecorated(true);
        LimitSPO2.setResizable(false);

        spo2_val.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        spo2_val.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spo2_val.setText("90");
        spo2_val.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spo2_valMouseClicked(evt);
            }
        });

        return_spo2.setText("Save");
        return_spo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_spo2ActionPerformed(evt);
            }
        });

        cancel2.setText("cancel");
        cancel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Insert SpO2 alarm Limit");

        javax.swing.GroupLayout LimitSPO2Layout = new javax.swing.GroupLayout(LimitSPO2.getContentPane());
        LimitSPO2.getContentPane().setLayout(LimitSPO2Layout);
        LimitSPO2Layout.setHorizontalGroup(
            LimitSPO2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitSPO2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LimitSPO2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(LimitSPO2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(LimitSPO2Layout.createSequentialGroup()
                            .addComponent(return_spo2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cancel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(spo2_val, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LimitSPO2Layout.setVerticalGroup(
            LimitSPO2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LimitSPO2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spo2_val, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LimitSPO2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(return_spo2)
                    .addComponent(cancel2))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        Patient_UI.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        Patient_UI.setAlwaysOnTop(true);
        Patient_UI.setBackground(new java.awt.Color(51, 0, 255));
        Patient_UI.setMinimumSize(new java.awt.Dimension(438, 375));
        Patient_UI.setUndecorated(true);
        Patient_UI.setResizable(false);
        Patient_UI.setSize(new java.awt.Dimension(0, 0));
        Patient_UI.setType(java.awt.Window.Type.POPUP);

        savepatient.setText("save");
        savepatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savepatientActionPerformed(evt);
            }
        });

        cancel_patient.setText("cancel");
        cancel_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_patientActionPerformed(evt);
            }
        });

        Patient_data_heading3.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        Patient_data_heading3.setText("Insert Patient data");

        name_field.setText("insert name");
        name_field.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                name_fieldMouseClicked(evt);
            }
        });

        name.setText("Patient name:");

        surname.setText("Patient surname:");

        surname_field.setText("instert surname");
        surname_field.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                surname_fieldMouseClicked(evt);
            }
        });

        sex.setText("Patient sex: ");

        sex_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "unknown", "male", "female" }));

        birthdate.setText("Patient birthdate:");

        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        month.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        day_lab.setText("Day");

        month_lab.setText("Month");

        year_lab.setText("Year");

        year.setModel(birthYear);

        javax.swing.GroupLayout Patient_UILayout = new javax.swing.GroupLayout(Patient_UI.getContentPane());
        Patient_UI.getContentPane().setLayout(Patient_UILayout);
        Patient_UILayout.setHorizontalGroup(
            Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Patient_UILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Patient_UILayout.createSequentialGroup()
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name)
                            .addComponent(surname)
                            .addComponent(sex)
                            .addComponent(birthdate))
                        .addGap(18, 18, 18)
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name_field, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(surname_field)
                            .addComponent(sex_box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(Patient_UILayout.createSequentialGroup()
                                .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Patient_UILayout.createSequentialGroup()
                                        .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Patient_UILayout.createSequentialGroup()
                                        .addComponent(day_lab)
                                        .addGap(36, 36, 36)
                                        .addComponent(month_lab)))
                                .addGap(18, 18, 18)
                                .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(year_lab)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(Patient_UILayout.createSequentialGroup()
                                .addComponent(savepatient, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancel_patient, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(Patient_data_heading3))
                .addContainerGap())
        );
        Patient_UILayout.setVerticalGroup(
            Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Patient_UILayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Patient_data_heading3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Patient_UILayout.createSequentialGroup()
                        .addComponent(name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(day_lab)
                            .addComponent(month_lab)
                            .addComponent(year_lab))
                        .addGap(3, 3, 3)
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(Patient_UILayout.createSequentialGroup()
                        .addComponent(name)
                        .addGap(18, 18, 18)
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surname)
                            .addComponent(surname_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sex)
                            .addComponent(sex_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(birthdate)))
                .addGap(18, 18, 18)
                .addGroup(Patient_UILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savepatient)
                    .addComponent(cancel_patient))
                .addGap(29, 29, 29))
        );

        pausealert.setAlwaysOnTop(true);
        pausealert.setBackground(javax.swing.UIManager.getDefaults().getColor("tab_attention_fill_lower"));
        pausealert.setMaximumSize(new java.awt.Dimension(380, 135));
        pausealert.setMinimumSize(new java.awt.Dimension(380, 135));
        pausealert.setUndecorated(true);
        pausealert.setResizable(false);

        pauseok.setText("Ok");
        pauseok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseokActionPerformed(evt);
            }
        });

        pausecancel.setText("cancel");
        pausecancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausecancelActionPerformed(evt);
            }
        });

        pauselabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pauselabel.setText("Are you sure to pause alert?");

        javax.swing.GroupLayout pausealertLayout = new javax.swing.GroupLayout(pausealert.getContentPane());
        pausealert.getContentPane().setLayout(pausealertLayout);
        pausealertLayout.setHorizontalGroup(
            pausealertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pausealertLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pausealertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pausealertLayout.createSequentialGroup()
                        .addComponent(pauseok, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(pausecancel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pausealertLayout.createSequentialGroup()
                        .addComponent(pauselabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pausealertLayout.setVerticalGroup(
            pausealertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pausealertLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(pauselabel)
                .addGap(33, 33, 33)
                .addGroup(pausealertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pauseok)
                    .addComponent(pausecancel))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1600, 900));
        setPreferredSize(new java.awt.Dimension(1600, 900));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        name_lab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        name_lab.setText("Patient name:");

        name_disp.setEditable(false);
        name_disp.setBackground(new java.awt.Color(245, 245, 245));
        name_disp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        surname_disp.setEditable(false);
        surname_disp.setBackground(new java.awt.Color(245, 245, 245));
        surname_disp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        surname_lab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        surname_lab.setText("Patient surname:");

        patient_cng.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        patient_cng.setText("Change Patient");
        patient_cng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_cngActionPerformed(evt);
            }
        });

        birth_disp.setEditable(false);
        birth_disp.setBackground(new java.awt.Color(245, 245, 245));
        birth_disp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        birthday_lab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        birthday_lab.setText("Patient birthdate:");

        sexlab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sexlab.setText("Patient sex: ");

        sex_disp.setEditable(false);
        sex_disp.setBackground(new java.awt.Color(245, 245, 245));
        sex_disp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        heartrate_out.setEditable(false);
        heartrate_out.setBackground(new java.awt.Color(245, 245, 245));
        heartrate_out.setFont(new java.awt.Font("Arial", 1, 125)); // NOI18N
        heartrate_out.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        Heart_lab.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Heart_lab.setText("Heart Rate");

        limitlowhrout.setEditable(false);
        limitlowhrout.setBackground(new java.awt.Color(245, 245, 245));
        limitlowhrout.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        limitlowhrout.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        limitlowhrout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                limitlowhroutMouseClicked(evt);
            }
        });

        limituphrout.setEditable(false);
        limituphrout.setBackground(new java.awt.Color(245, 245, 245));
        limituphrout.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        limituphrout.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        limituphrout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                limituphroutMouseClicked(evt);
            }
        });

        SPO2_lab.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        SPO2_lab.setText("SpO2");

        spo2_out.setEditable(false);
        spo2_out.setBackground(new java.awt.Color(245, 245, 245));
        spo2_out.setFont(new java.awt.Font("Arial", 1, 125)); // NOI18N
        spo2_out.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        spo2limitout.setEditable(false);
        spo2limitout.setBackground(new java.awt.Color(245, 245, 245));
        spo2limitout.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        spo2limitout.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spo2limitout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spo2limitoutMouseClicked(evt);
            }
        });

        spo2_lab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spo2_lab.setText("SpO2 limit");

        reset_limit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        reset_limit.setText("restore default");
        reset_limit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_limitActionPerformed(evt);
            }
        });

        alarmbreak.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        alarmbreak.setText("pause alert");
        alarmbreak.setEnabled(false);
        alarmbreak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alarmbreakActionPerformed(evt);
            }
        });

        header_label.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        header_label.setText("Vitaloverlord");

        lower_limit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lower_limit.setText("HR lower limit");

        upper_limit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        upper_limit.setText("HR upper limit");

        alarm_img.setBackground(new java.awt.Color(245, 245, 245));
        alarm_img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/alarm_on.png"))); // NOI18N

        age.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        age.setText("Age:");

        age_field.setEditable(false);
        age_field.setBackground(new java.awt.Color(245, 245, 245));
        age_field.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        HR_alert.setEditable(false);
        HR_alert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        spo2_alert.setEditable(false);
        spo2_alert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("SpO2 alert");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Pulse alert");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HR_alert, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sexlab)
                                .addComponent(birthday_lab)
                                .addComponent(name_lab))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(sex_disp, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(name_disp, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(birth_disp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(heartrate_out, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Heart_lab)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SPO2_lab)
                                .addComponent(spo2_out, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(spo2_alert, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lower_limit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(limitlowhrout, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(upper_limit)
                            .addComponent(limituphrout, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spo2_lab)
                            .addComponent(spo2limitout, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reset_limit, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(alarmbreak, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(alarm_img, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(surname_lab)
                            .addComponent(age))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(age_field)
                            .addComponent(surname_disp)
                            .addComponent(patient_cng, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(header_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header_label)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(name_lab)
                            .addComponent(name_disp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birthday_lab)
                            .addComponent(birth_disp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sexlab)
                            .addComponent(sex_disp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(surname_lab)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(age))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(surname_disp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(age_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(patient_cng))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(HR_alert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spo2_alert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(alarmbreak, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(alarm_img, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lower_limit)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(limitlowhrout, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(upper_limit)
                                    .addGap(6, 6, 6)
                                    .addComponent(limituphrout, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(reset_limit, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Heart_lab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(heartrate_out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(SPO2_lab)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spo2_out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(49, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spo2_lab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spo2limitout, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
	//-----------------------------------Main Function --------------------//
	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        display = Display.getinstance();
        sensor = new SensorControl();
        display.setVisible(true);
        SensorControl.start();
        display.Patient_UI.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.Setlimitstartup.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.LimitHR_lower.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.LimitHR_upper.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.LimitSPO2.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.pausealert.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.ResetLimits.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));
        display.disable_all();
        display.Patient_UI.setVisible(true);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });	
	}
			
//------------------------------- Java GUI properties declaration-------------------------------------//
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField HR_alert;
    private javax.swing.JLabel Heart_lab;
    private javax.swing.JFrame LimitHR_lower;
    private javax.swing.JFrame LimitHR_upper;
    private javax.swing.JFrame LimitSPO2;
    private javax.swing.JFrame Patient_UI;
    private javax.swing.JLabel Patient_data_heading3;
    private javax.swing.JFrame ResetLimits;
    private javax.swing.JLabel SPO2_lab;
    private javax.swing.JFrame Setlimitstartup;
    private javax.swing.JLabel age;
    private javax.swing.JTextField age_field;
    private javax.swing.JLabel alarm_img;
    private javax.swing.JButton alarmbreak;
    private javax.swing.JTextField birth_disp;
    private javax.swing.JLabel birthdate;
    private javax.swing.JLabel birthday_lab;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton cancel2;
    private javax.swing.JButton cancel_lowerHR;
    private javax.swing.JButton cancel_patient;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JLabel day_lab;
    private javax.swing.JButton decline;
    private javax.swing.JLabel header_label;
    private javax.swing.JTextField heartrate_out;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField limitlowhrout;
    private javax.swing.JTextField limituphrout;
    private javax.swing.JLabel lower_label1;
    private javax.swing.JLabel lower_label2;
    private javax.swing.JLabel lower_limit;
    private javax.swing.JTextField lower_value;
    private javax.swing.JTextField lowlim_ini;
    private javax.swing.JComboBox<String> month;
    private javax.swing.JLabel month_lab;
    private javax.swing.JLabel name;
    private javax.swing.JTextField name_disp;
    private javax.swing.JTextField name_field;
    private javax.swing.JLabel name_lab;
    private javax.swing.JButton patient_cng;
    private javax.swing.JFrame pausealert;
    private javax.swing.JButton pausecancel;
    private javax.swing.JLabel pauselabel;
    private javax.swing.JButton pauseok;
    private javax.swing.JButton reset_limit;
    private javax.swing.JButton restoredefault;
    private javax.swing.JButton return_lowerHR;
    private javax.swing.JButton return_spo2;
    private javax.swing.JButton return_upper;
    private javax.swing.JButton savepatient;
    private javax.swing.JButton setlimits;
    private javax.swing.JLabel sex;
    private javax.swing.JComboBox<String> sex_box;
    private javax.swing.JTextField sex_disp;
    private javax.swing.JLabel sexlab;
    private javax.swing.JTextField spo2_alert;
    private javax.swing.JTextField spo2_ini;
    private javax.swing.JLabel spo2_lab;
    private javax.swing.JTextField spo2_out;
    private javax.swing.JTextField spo2_val;
    private javax.swing.JTextField spo2limitout;
    private javax.swing.JLabel surname;
    private javax.swing.JTextField surname_disp;
    private javax.swing.JTextField surname_field;
    private javax.swing.JLabel surname_lab;
    private javax.swing.JTextField uplim_ini;
    private javax.swing.JLabel upper_label;
    private javax.swing.JLabel upper_label1;
    private javax.swing.JLabel upper_limit;
    private javax.swing.JTextField upper_value;
    private javax.swing.JComboBox<String> year;
    private javax.swing.JLabel year_lab;
    private javax.swing.JButton yes;
    // End of variables declaration//GEN-END:variables

	
    private void surname_fieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surname_fieldMouseClicked
        surname_field.setText("");
    }//GEN-LAST:event_surname_fieldMouseClicked

    private void name_fieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_name_fieldMouseClicked
        name_field.setText("");
    }//GEN-LAST:event_name_fieldMouseClicked
	 
	private void savepatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savepatientActionPerformed

        String name = name_field.getText();
        String surname = surname_field.getText();
        String sex = (String)sex_box.getSelectedItem();
        String gday = (String)day.getSelectedItem();
        String gmonth = (String)month.getSelectedItem();
        String gyear = (String)year.getSelectedItem();

        String birthdate = gday + "." + gmonth + "." + gyear;
        boolean ch = checkname(name, surname, birthdate);     
        if (ch == true){        
            int age = pat.addpatient(name, surname, sex, birthdate);
            updatepatient(name, surname, sex, birthdate, age);
            display.Patient_UI.setVisible(false);
            display.setVisible(true);
            // if patient is initial
            if (init == true){
                if (age <= 1){
                    display.updatelimit("120", "190","90");
                    surveyhr.updatelowerhr("120");
                    surveyhr.updateupperhr("190");
                    surveyspo2.updatespo2("90");
                }
                else if (age > 1 && age <= 6){
                    display.updatelimit("90", "150","90");
                    surveyhr.updatelowerhr("90");
                    surveyhr.updateupperhr("150");
                    surveyspo2.updatespo2("90");
                }
                else if (age > 6 && age <= 16){
                    display.updatelimit("70", "110","90");
                    surveyhr.updatelowerhr("70");
                    surveyhr.updateupperhr("110");
                    surveyspo2.updatespo2("90");
                }
                else if (age > 16){
                    display.updatelimit("50", "100","90");
                    surveyhr.updatelowerhr("50");
                    surveyhr.updateupperhr("100");
                    surveyspo2.updatespo2("90");
                }
                alarmbreak.setEnabled(true);
                init = false;
            }
        }
            enable_all();
            Patient_UI.setVisible(false);
    }//GEN-LAST:event_savepatientActionPerformed
	
	private void cancel_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_patientActionPerformed
        // if patient is initial
        if (init == true){ 
            display.Patient_UI.setVisible(false);
            display.Setlimitstartup.setVisible(true);
            updatepatient("X", "X", "X", "X", 0);
        }
        else{
            Patient_UI.setVisible(false);
        }
    }//GEN-LAST:event_cancel_patientActionPerformed
	
	private void patient_cngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_cngActionPerformed
        display.Patient_UI.setVisible(true);
        disable_all();
        String pat_name = name_disp.getText();
        name_field.setText(pat_name);
        String pat_surname = surname_disp.getText();
        surname_field.setText(pat_surname);
        String sex = sex_disp.getText();
        String gday = (String)day.getSelectedItem();
        String gmonth = (String)month.getSelectedItem();
        String gyear = (String)year.getSelectedItem();
    }//GEN-LAST:event_patient_cngActionPerformed
	
//---------------------------------------------- Limits by click enter in set----------------------------------------------------------//
	
	private void lowlim_iniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowlim_iniActionPerformed
        String lowerfiledvalue = lowlim_ini.getText();
        try {
            int lowerhr = Integer.parseInt( lowerfiledvalue );
            if (lowerhr < 20 || lowerhr >= 180) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 180 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch( Exception e )
        {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_lowlim_iniActionPerformed
	
	private void uplim_iniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uplim_iniActionPerformed
        String upperfieldvalue = uplim_ini.getText();
        try {
            int upper = Integer.parseInt( upperfieldvalue );
            if (upper < 20 || upper >= 300) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 300 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch( Exception e )
        {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uplim_iniActionPerformed
	
	private void spo2_iniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spo2_iniActionPerformed
        String spo2_val = spo2_ini.getText();
        try {
            int spo2_int = Integer.parseInt( spo2_val );
            if (spo2_int < 60 || spo2_int >= 100) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 60 und 100 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch( Exception e )
        {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_spo2_iniActionPerformed
	
    private void restoredefaultActionPerformed(java.awt.event.ActionEvent evt) {
	// restore default is only text output here
        lowlim_ini.setText("50");
        uplim_ini.setText("160");
        spo2_ini.setText("90");        
    }    
	private void setlimitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setlimitsActionPerformed
        String lowerfiledvalue = lowlim_ini.getText();
        String upperfield = uplim_ini.getText();
        String spo2 = spo2_ini.getText();

        boolean ch = check_init(lowerfiledvalue,upperfield,spo2);
        if (ch == true){
            updatelimit(lowerfiledvalue,upperfield,spo2);
            init = false;
            enable_all();
            display.Setlimitstartup.setVisible(false);
            alarmbreak.setEnabled(true);
        }
        else{
            JOptionPane.showMessageDialog(new JFrame(), "Bitte gültige Werte eingeben","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_setlimitsActionPerformed
    	
	
//--------------------------------------------- Reset Limit functions ----------------------------------------------------//
    private void reset_limitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_limitActionPerformed
        disable_all();
        ResetLimits.setVisible(true);
    }//GEN-LAST:event_reset_limitActionPerformed
	
	private void yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesActionPerformed
        enable_all();
        updatelimit("50", "160", "90");
        ResetLimits.setVisible(false);
    }//GEN-LAST:event_yesActionPerformed
	
    private void declineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineActionPerformed
        enable_all();
        ResetLimits.setVisible(false);
    }//GEN-LAST:event_declineActionPerformed


	
//----------------------------------------------- Set Limits ------------------------------------------------------------//
	// lower
	private void limitlowhroutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_limitlowhroutMouseClicked
        if (disable == false){
            disable_all();
            limitlowhrout.setBackground(Color.GREEN);
            String lower = limitlowhrout.getText();
            lower_value.setText(lower);
            LimitHR_lower.setVisible(true);
        }
    }//GEN-LAST:event_limitlowhroutMouseClicked
	
	private void lower_valueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lower_valueMouseClicked
        lower_value.setText("");
    }//GEN-LAST:event_lower_valueMouseClicked
	
	private void return_lowerHRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_lowerHRActionPerformed
        String lowerfiledvalue = lower_value.getText();
        boolean ch = checklowhr(lowerfiledvalue);
        if (ch == true){
            enable_all();
            Limit_lower(lowerfiledvalue);
            limitlowhrout.setBackground(Color.WHITE);
            LimitHR_lower.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebene Werte überprüfen","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_return_lowerHRActionPerformed

    private void cancel_lowerHRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_lowerHRActionPerformed
        enable_all();
        limitlowhrout.setBackground(Color.WHITE);
        LimitHR_lower.setVisible(false);
    }//GEN-LAST:event_cancel_lowerHRActionPerformed
	
	// upper
    private void limituphroutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_limituphroutMouseClicked
        if (disable == false){
            disable_all(); 
            String lower = limituphrout.getText();
            upper_value.setText(lower);
            limituphrout.setBackground(Color.GREEN);
            LimitHR_upper.setVisible(true); 
        }
    }//GEN-LAST:event_limituphroutMouseClicked
	
	private void upper_valueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upper_valueMouseClicked
        upper_value.setText("");
    }//GEN-LAST:event_upper_valueMouseClicked
	
	private void return_upperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_upperActionPerformed
        String up_value = upper_value.getText();
        boolean ch = checkuphr(up_value);
        if (ch == true){
            enable_all();
            Limit_upper( up_value);
            limituphrout.setBackground(Color.WHITE);
            LimitHR_upper.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebene Werte überprüfen","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_return_upperActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        enable_all();
        limituphrout.setBackground(Color.WHITE);
        LimitHR_upper.setVisible(false);
    }//GEN-LAST:event_cancel1ActionPerformed
	
	// spo2
    private void spo2_valMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spo2_valMouseClicked
        spo2_val.setText("");
    }//GEN-LAST:event_spo2_valMouseClicked
	
	private void return_spo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_spo2ActionPerformed
        String spo2 = spo2_val.getText();
        boolean ch = checkspo2(spo2);
        if (ch == true){
            enable_all();
            Limit_spo2( spo2 );
            spo2limitout.setBackground(Color.WHITE);
            LimitSPO2.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebene Werte überprüfen","Warnung",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_return_spo2ActionPerformed

    private void cancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel2ActionPerformed
        enable_all();
        spo2limitout.setBackground(Color.WHITE);
        LimitSPO2.setVisible(false);
    }//GEN-LAST:event_cancel2ActionPerformed
	
	private void spo2limitoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spo2limitoutMouseClicked
        if (disable == false){
            disable_all();
            spo2limitout.setBackground(Color.GREEN);
            String lower = spo2limitout.getText();
            spo2_val.setText(lower); 
            LimitSPO2.setVisible(true);
        }
    }//GEN-LAST:event_spo2limitoutMouseClicked

	
//------------------------------------------------------- Alert functions ------------------------------------------------//
	private void alarmbreakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alarmbreakActionPerformed
       pausealert.setVisible(true);
       alarmbreak.setEnabled(false);
       disable_all();
    }//GEN-LAST:event_alarmbreakActionPerformed

    //----- Nötig??-----//
	private void lowlim_iniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lowlim_iniMouseClicked
        lowlim_ini.setText("");
    }//GEN-LAST:event_lowlim_iniMouseClicked

    private void spo2_iniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spo2_iniMouseClicked
        spo2_ini.setText("");
    }//GEN-LAST:event_spo2_iniMouseClicked
        
	private void uplim_iniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uplim_iniMouseClicked
        uplim_ini.setText("");
    }//GEN-LAST:event_uplim_iniMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                SensorControl.end();   
                System.exit(0);
            }
        });
    }//GEN-LAST:event_formWindowClosing

    private void pauseokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseokActionPerformed
       if (pause == false){
            alarm_img.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageList[1])));
            surveyhr.alertbreak();
            surveyspo2.alertbreak();
            timer.schedule(new TimerTask() {
                @Override
                public void run() { // Function runs every 5 MINUTES minutes.
                    if (pause == true){
                    alarm_img.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageList[0])));
                    alarmbreak.setEnabled(true);
                    surveyhr.alertbreak();
                    surveyspo2.alertbreak();
                    alarmbreak.setText("pause alert");
                    System.out.println("Falsche Zeit ausgabe");
                    }
               }
            },1000*60*5);
        // TODO timecheck
        pause = true;
        pauselabel.setText("Are you sure to end pause?");
        alarmbreak.setText("end pause");
       }
        else{     
           alarm_img.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageList[0])));
           alarmbreak.setEnabled(true);
           surveyhr.alertbreak();
           surveyspo2.alertbreak();
           pause = false;
           pauselabel.setText("Are you sure to pause alert?");
           alarmbreak.setText("pause alert");
       }
        alarmbreak.setEnabled(true);
        pausealert.setVisible(false);
        enable_all();
    }//GEN-LAST:event_pauseokActionPerformed

    private void pausecancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausecancelActionPerformed
        pausealert.setVisible(false);
        alarmbreak.setEnabled(true);
        enable_all();
    }//GEN-LAST:event_pausecancelActionPerformed

    
//----------------------------------------------------- general Properties -----------------------------------------------//
    private void initCombobox() {
	int inc = 1900;
	int currentYear = Calendar.getInstance().get(Calendar.YEAR);
	int dif = currentYear-inc;
	String[] years = new String[dif + 1];
        
	for(int i = 0;i < dif +1;i++){
            years [i] = Integer.toString(inc);
            inc++;
	}
        birthYear = new javax.swing.DefaultComboBoxModel<>(years);
    }
    
    private void close(){
        Display gui_monitor = new Display();
        gui_monitor.setVisible(false);
    }
    
    private void systemclose(){
        SensorControl.end();
        WindowEvent winCloseing = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winCloseing);
    }
	
    private void disable_all(){
        disable = true;
        alarmbreak.setEnabled(false);
        patient_cng.setEnabled(false);
        reset_limit.setEnabled(false);
    }
	
    private void enable_all(){
        disable = false;
        alarmbreak.setEnabled(true);
        patient_cng.setEnabled(true);
        reset_limit.setEnabled(true);
    }
    
//----------------------------------------------------- Update Block ----------------------------------------------------//  
    // Update initial Limits
    protected void updatelimit(String limitlowhrtext, String limituphrtext, String limitspo2text){
        limitlowhrout.setText(limitlowhrtext);
        limituphrout.setText(limituphrtext);
        spo2limitout.setText(limitspo2text);
        surveyhr.updatelowerhr(limitlowhrtext);
        surveyhr.updateupperhr(limituphrtext);
        surveyspo2.updatespo2(limitspo2text);
    }

    // update lower puls limit
    protected void Limit_lower(String limitlowhrtext){        
        limitlowhrout.setText(limitlowhrtext);
        surveyhr.updatelowerhr(limitlowhrtext);
    }
	
    // update upper pulse limit
    protected void Limit_upper (String limituphrtext){
        limituphrout.setText(limituphrtext);
        surveyhr.updateupperhr(limituphrtext);
    }
	
    // update spo2 limit
    protected void Limit_spo2(String limitspo2text){
        spo2limitout.setText(limitspo2text); 
        surveyspo2.updatespo2(limitspo2text);
    }
	
    protected void updatepatient(String name, String surname, String sex, String birth, int age ){
        name_disp.setText(name);
        surname_disp.setText(surname);
        sex_disp.setText(sex);
        birth_disp.setText(birth);
        age_field.setText(Integer.toString(age));
    }
	
    protected void updatepulse (int currenthr){
        heartrate_out.setText(Integer.toString(currenthr));
        surveyhr.alerthr(currenthr);
    }
	
    protected void updatespo2(int currentspo2){
        spo2_out.setText(Integer.toString(currentspo2));
        surveyspo2.alertspo2(currentspo2);
    }
    
    
//---------------------------------------------------- Check Block -----------------------------------------------------//    
    private boolean unittest(){
        //test = new DisplayTest();
        
        try {
            //testUpdatelimits();
            return true;
        }
        catch (Exception e){
            return false;
        }              
    }
    
    protected boolean check_init(String lowhr, String uphr, String spo2){
        try {
            int lowerhr = Integer.parseInt( lowhr );
            
            if (lowerhr <= 20 || lowerhr > 180) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 180 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            int upperhr = Integer.parseInt( uphr );
            if (upperhr <= 20 || upperhr > 300) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 300 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }  
            int spo2_int = Integer.parseInt( spo2 );
            if (spo2_int < 60 || spo2_int > 100) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 60 und 100 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (upperhr <= lowerhr){
                JOptionPane.showMessageDialog(new JFrame(), "Obere Grenze muss höher als die untere Grenze sein","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        }
        catch ( Exception e ){
            return false;
        }
    }
    
    private  boolean checklowhr(String low_value){               
        try{
            int up_int = Integer.parseInt(limituphrout.getText());
            int low_int = Integer.parseInt( low_value );
            if (low_int < 20 || low_int > 180) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 180 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            else if (low_int >= up_int){
                JOptionPane.showMessageDialog(new JFrame(), "Unteres Limit muss tiefer als oberes Limit sein","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            else {       
                return true;
            }
        }
        catch( Exception e )
        {    
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
            return false;
        } 
    }
        
    private  boolean checkuphr(String up_value){               
        try{
            int low_int = Integer.parseInt(limitlowhrout.getText());
            int up_int = Integer.parseInt( up_value );
            if (up_int < 20 || up_int > 300) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 20 und 300 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            else if (up_int <= low_int){
                JOptionPane.showMessageDialog(new JFrame(), "Oberes Limit muss höher als unteres Limit sein","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            else {       
                return true;
            }
        }
        catch( Exception e )
        {    
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
            return false;
        } 
    }
    
    private boolean checkspo2(String spo2_value){               
        try{
            int low_int = Integer.parseInt( spo2_value );
            if (low_int < 60 || low_int > 100) {
                JOptionPane.showMessageDialog(new JFrame(), "Nur Werte zwischen 60 und 100 sind gültig","Warnung",JOptionPane.ERROR_MESSAGE);
                return false;
            }
            else {       
                return true;
            }
        }
        catch( Exception e )
        {    
            JOptionPane.showMessageDialog(new JFrame(), "Eingegebener Wert ist keine gültige Zahl","Warnung",JOptionPane.ERROR_MESSAGE);
            return false;
        } 
    }
        
    private boolean checkname(String name, String surname, String birth){               
        String regex = "(.)*(\\d)(.)*";      
        Pattern pattern = Pattern.compile(regex);
        Matcher matname = pattern.matcher(name);
            boolean matchname = matname.matches();
            if (matchname) {
                return false;
            } 
            
        Matcher matsurname = pattern.matcher(surname);
            boolean matchsurname = matsurname.matches();
            if (matchsurname) {
                return false;
            }     

        if ((birth.matches("\\d{2}.\\d{2}.\\d{4}")) == false){
            return false;
        }
        return true;
    }
	
	
//--------------------------------------------------- alarm Block ------------------------------------------------------//
    protected void alerthr(boolean up){
        if (init == false){
            if (up == true){
                HR_alert.setText("Puls zu hoch");
            }
            else {
                HR_alert.setText("Puls zu niedrig");
            }
            HR_alert.setBackground(Color.RED);
        }
    }
    
    protected void noalerthr (boolean up){
        if (up == true){
            HR_alert.setText("");
        }
        else {
            HR_alert.setText("");
        }
        HR_alert.setBackground(Color.WHITE);
    }
	
    protected void alertspo2(){
        spo2_alert.setText("spo2 Wert zu niedrig");
        spo2_alert.setBackground(Color.RED);
    }
    protected void noalertspo2(){
        spo2_alert.setText("");
        spo2_alert.setBackground(Color.WHITE);
    }
    
//-------------------------- get Variables for testing ----------------------//
    public String getspo2limit(){
        String spo2 = spo2limitout.getText();
        return spo2;
    }

    String getlow() {
        String low = limitlowhrout.getText();
        return low;
    }

    String gethigh() {
        String low = limituphrout.getText();
        return low;
    }

    Display getdisplay(){
        Display inst = display;
        return inst;
    }
    
    HRSurveillance gethrinst() {
        HRSurveillance inst = surveyhr;
        return inst; 
    }
    SPO2Surveillance getspo2inst(){
        SPO2Surveillance inst = surveyspo2;
        return inst;
    }

    Object[] getname(Display display) {
        String name = name_disp.getText();
        String surname = surname_disp.getText();
        String sex = sex_disp.getText();
        String birthdate = birth_disp.getText();
        String age = age_field.getText();
        
        Object[] patient = new Object[5];
        patient[0] = name;
        patient[1] = surname;
        patient[2] = sex;
        patient[3] = birthdate;
        patient[4] = age;
        return patient;
    }

    String getpulse() {
        String pulse = heartrate_out.getText();
        return pulse;
    }
    
    String getspo2() {
        String pulse = spo2_out.getText();
        return pulse;
    }

    String getalerthr() {
        String pulse = HR_alert.getText();
        return pulse;
    }

    String getalertsp() {
        String spo = spo2_alert.getText();
        return spo;
    }
    public static Display getinstance(){
        if (display == null){
            display = new Display();
        }
        return display;   
    } 
}
